{
  "name": "speech-rule-engine",
  "version": "0.2.3",
  "description": "A standalone speech rule engine for XML structures, based on the original engine from ChromeVox.",
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "node tests/mathml_store_test.js",
    "prepublish": "make clean; make publish"
  },
  "maintainers": [
    {
      "name": "Volker Sorge",
      "email": "Volker.Sorge@gmail.com",
      "url": "http://www.cs.bham.ac.uk/~vxs"
    }
  ],
  "bugs": {
    "url": "https://github.com/zorkow/speech-rule-engine/issues",
    "email": "volker.sorge@gmail.com"
  },
  "license": {
    "type": "Apache",
    "url": "http://github.com/mathjax/MathJax-node/blob/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zorkow/speech-rule-engine"
  },
  "keywords": [
    "screen-reader",
    "xml",
    "a11y"
  ],
  "homepage": "https://github.com/zorkow/speech-rule-engine",
  "dependencies": {
    "commander": "*",
    "xmldom": "*",
    "xpath": "*"
  },
  "files": [
    "index.js",
    "LICENSE",
    "README.md",
    "lib/"
  ],
  "main": "index.js",
  "readme": "speech-rule-engine\n==================\n\nNodeJS version of the ChromeVox speech rule engine.\nForked from ChromeVox release 1.31.0\n\nThere are two ways of using this engine. Either as a package via npm or by\nbuilding it as a standalone tool.  The former is the easiest way to use the\nspeech rule engine via its Api and is the preferred option if you just want to\ninclude it in your project. The latter is useful if you want to use the speech\nrule engine in batch mode or interactivley to add your own code.\n\nNode Module\n-----------\n\nInstall as a node module using npm:\n\n     npm install speech-rule-engine\n\nThen import into a running node or a source file using require:\n\n     require('speech-rule-engine');\n     \n### API #######\n\nCurrent API functions are\n     \n     processExpression(mathml); \n\nTakes a string containing a MathML expression and returns the corresponding\nspeech string.\n\n     processFile(input, output);\n\nTakes an input file containing a MathML expression and writes the corresponding\nspeech string to the output file.\n\n     setupEngine(options);\n\nTakes an object of option/value pairs to parameterise the Speech Rule Engine.\nValid options are:\n\n| Option | Value |\n| ---- | ---- |\n| *domain* | Domain or subject area of speech rules (e.g., mathspeak, physics).|\n| *style* | Style of speech rules (e.g., brief).|\n| *semantics* | Boolean flag to swich on semantic interpretation.|\n\nObserve that some speech rule domains only make sense with semantics switched on\nor off and that not every domain implements every style. See also the\ndescription of the command line parameters in the next section for more details.\n\nStandalone Engine\n-----------------\n\nNode dependencies you have to install:\n\n     closure\n     closurecompiler\n     closure-library\n     xmldom\n     xpath\n     commander\n \nUsing npm run\n\n     npm install closure closurecompiler closure-library xmldom xpath commander\n\n\nIn version 1.43 of the closure library there is a mistake in the file \n\n    closure-library/closure/bin/build/jscompiler.py \n\nYou might need to change\n\n    # Attempt 32-bit mode if we're <= Java 1.7\n    if java_version >= 1.7:\n      args += ['-d32']\n\nto \n\n    # Attempt 32-bit mode if we're <= Java 1.7\n    if java_version <= 1.7:\n      args += ['-d32']\n\n### Build #############\n\nDepending on your setup you might need to adapt the NODEJS and NODE_MODULES\nvariable in the Makefile.  Then simply run\n\n    make\n    \nThis will make both the command line executable and the interactive load script.\n\n### Run on command line ############\n\n\n    bin/sre -i infile -o outfile\n\nAs an example run\n\n    bin/sre -i samples/sample1.xml -o sample1.txt\n    \n### Run interactively ############\n\nImport into a running node process\n\n    require('./lib/sre4node.js');\n\nNote, that this will import the full functionality of the speech rule engine in\nthe sre namespace and of the closure library in the goog namespace.\n  \n\n### Command Line Options ###########\n\nThe following is a list of command line options for the speech rule engine.\n\n| Short | Long | Meaning | \n| ----- | ---- | :------- |\n| -i | --input [name]  | Input file [name] |\n| -o | --output [name] | Output file [name].\n||| If not given output is printed to stdout. |\n| | |\n| | |\n| | |\n| -d | --domain [name] | Domain or subject area [name]. |\n||| This refers to a particular subject type of speech rules or subject area rules are defined for (e.g., mathspeak, physics). |\n||| If no domain parameter is provided, domain default is used. |\n| -t | --style [name]  | Speech style [name]. |\n||| Selects a particular speech style (e.g., brief). |\n||| If no style parameter is provided, style default is used. |\n| -s | --semantics     | Switch on semantics interpretation. |\n||| Note, that some speech rule domains only make sense with semantics switched on or off. |\n| -e | --enumerate     | Enumerates all available domains and styles. |\n||| Note that not every style is implemented in every domain. |\n| | |\n| -v | --verbose       | Verbose mode. Print additional information, useful for debugging. |\n| -l | --log [name]    | Log file [name]. Verbose output is redirected to this file. |\n||| If not given verbose output is printed to stdout. |\n| | |\n| -h | --help   | output usage information |\n| -V | --version  |      output the version number |\n\n\nDevelopers Notes\n----------------\n\n### Build Options \n\nOther make targets useful during development are:\n\n    make test\n    \nRuns all the tests using the Node's assert module. Output is pretty printed to stdout.\n\n    make lint\n    \nRuns the closure linter tool. To use this option, you need to install the appropriate node package with\n\n    npm install closure-linter-wrapper\n\nTo automatically fix some of linting errors run:\n    \n    make fixjsstyle\n\nNote, that all JavaScript code in this repository is fully linted and compiles error free with respect to the strictest possible closure compiler settings.\n\nWhen creating a pull request, please make sure that your code compiles and is fully linted.\n\n\n### Node Package\n\nThe speech rule engine is published as a node package in fully compiled form, together with the JSON libraries for translating atomic expressions. All relevant files are in the lib subdirectory.\n\nTo publish the node package run\n\n    npm publish\n\nThis first builds the package by executing\n\n    make publish\n    \nThis make command is also useful for local testing of the package.\n",
  "readmeFilename": "README.md",
  "_id": "speech-rule-engine@0.2.3",
  "_from": "speech-rule-engine@*"
}
