<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<title>README.html</title>

</head>

<body>

<h1>speech-rule-engine</h1>

<p>NodeJS version of the ChromeVox speech rule engine.
Forked from ChromeVox release 1.31.0</p>

<p>There are two ways of using this engine. Either as a package via npm or by
building it as a standalone tool.  The former is the easiest way to use the
speech rule engine via its Api and is the preferred option if you just want to
include it in your project. The latter is useful if you want to use the speech
rule engine in batch mode or interactivley to add your own code.</p>

<h2>Node Module</h2>

<p>Install as a node module using npm:</p>

<pre><code> npm install speech-rule-engine
</code></pre>

<p>Then import into a running node or a source file using require:</p>

<pre><code> require('speech-rule-engine');
</code></pre>

<h4>API</h4>

<p>Current API functions are</p>

<pre><code> processExpression(mathml);
</code></pre>

<p>Takes a string containing a MathML expression and returns the corresponding
speech string.</p>

<pre><code> processFile(input, output);
</code></pre>

<p>Takes an input file containing a MathML expression and writes the corresponding
speech string to the output file.</p>

<pre><code> setupEngine(options);
</code></pre>

<p>Takes an object of option/value pairs to parameterise the Speech Rule Engine.
Valid options are:</p>

<ul>
<li><em>domain</em> Domain of speech rules. This refers to a particular subject type of
speech rules or subject area rules are defined for (e.g., mathspeak, physics).</li>
<li><em>style</em> Style of speech rules. Selects a particular speech style (e.g., brief).</li>
<li><em>semantics</em> Boolean flag to swich on semantic interpretation.</li>
</ul>

<p>Observe that some speech rule domains only make sense with semantics switched on
or off and that not every domain implements every style. See also the
description of the command line parameters in the next section for more details.</p>

<h2>Standalone Engine</h2>

<p>Node dependencies you have to install:</p>

<pre><code> closure
 closurecompiler
 closure-library
 xmldom
 xpath
 commander
</code></pre>

<p>Using npm run</p>

<pre><code> npm install closure closurecompiler closure-library xmldom xpath commander
</code></pre>

<p>In version 1.43 of the closure library there is a mistake in the file </p>

<pre><code>closure-library/closure/bin/build/jscompiler.py
</code></pre>

<p>You might need to change</p>

<pre><code># Attempt 32-bit mode if we're &lt;= Java 1.7
if java_version &gt;= 1.7:
  args += ['-d32']
</code></pre>

<p>to </p>

<pre><code># Attempt 32-bit mode if we're &lt;= Java 1.7
if java_version &lt;= 1.7:
  args += ['-d32']
</code></pre>

<h4>Build</h4>

<p>Depending on your setup you might need to adapt the NODEJS and NODE_MODULES
variable in the Makefile.  Then simply run</p>

<pre><code>make
</code></pre>

<h4>Run on command line</h4>

<pre><code>bin/sre -i infile -o outfile
</code></pre>

<p>As an example run</p>

<pre><code>bin/sre -i samples/sample1.xml -o sample1.txt
</code></pre>

<h4>Run interactively</h4>

<p>Import into a running node process</p>

<pre><code>require('./lib/sre4node.js');
</code></pre>

<p>Note, that this will import the full functionality of the speech rule engine in
the sre namespace and of the closure library in the goog namespace.</p>

</body>
</html>
